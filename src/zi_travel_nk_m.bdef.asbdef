managed implementation in class zbp_travel_nk_m unique;
strict ( 2 );

define behavior for zi_travel_nk_m //alias <alias_name>
implementation in class zbp_travel_nk_m unique
persistent table ztravel_nk_m
with additional save
lock master
authorization master ( instance )
etag master LastChangedAt
early numbering
{
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;

  factory action copyTravel [1];

  internal action recalcTotPrice;

  validation validateCustomer on save { create; field CustomerId; }
  validation validateDates on save { create; field BeginDate, EndDate; }
  validation validateStatus on save { create; field OverallStatus; }
  validation validateCurencyCode on save { create; field CurrencyCode; }
  validation validateBookingfee on save { create; field BookingFee; }

  determination calculateTotalPrice on modify { create; field BookingFee , CurrencyCode;}

  create ( authorization : global );
  update;
  delete;
  field ( readonly )  TravelId, CreatedBy,CreatedAt,LastChangedBy,LastChangedAt;
  field ( mandatory ) AgencyId,CustomerId,BeginDate,EndDate,BookingFee,TotalPrice,CurrencyCode,OverallStatus;

  association _Booking { create (features : instance ); }

  mapping for ztravel_nk_m
    {
      TravelId      = travel_id;
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      BookingFee    = booking_fee;
      TotalPrice    = total_price;
      CurrencyCode  = currency_code;
      Description   = description;
      OverallStatus = overall_status;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
}

define behavior for zi_booking_nk_m //alias <alias_name>
implementation in class zbp_booking_nk_m unique
persistent table zbooking_nk_m
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly )  TravelId, BookingId, LastChangedAt;
  field ( mandatory ) CarrierId, ConnectionId , FlightDate, BookingStatus;
  field ( mandatory : create, readonly : update ) BookingDate,CustomerId; //Mandatory when create and can be read only when update

  determination calculateTotalPrice on modify { create; field FlightPrice , CurrencyCode;}

  association _Travel;
  association _Bookingsuppl { create ( features : instance ); } //Dynamic feature control when create Booking supplement Association (Need to implement code)
  mapping for zbooking_nk_m
    {
      TravelId      = travel_id;
      BookingId     = booking_id;
      BookingDate   = booking_date;
      CustomerId    = customer_id;
      CarrierId     = carrier_id;
      ConnectionId  = connection_id;
      FlightDate    = flight_date;
      FlightPrice   = flight_price;
      CurrencyCode  = currency_code;
      BookingStatus = booking_status;
      LastChangedAt = last_changed_at;
    }

}

define behavior for ZI_BOOKSUPP_NK_M //alias <alias_name>
implementation in class zbp_bookingsuppl_nk_m unique
//persistent table zbooksupp_nk_m
with unmanaged save with full data
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId, BookingSupplementId, LastChangedAt;
  field ( mandatory ) Price, SupplementId;

  determination calculateTotalPrice on modify { create; field Price , CurrencyCode;}

  association _Travel;
  association _Booking;
  mapping for zbooksupp_nk_m
    {
      TravelId            = travel_id;
      BookingId           = booking_id;
      BookingSupplementId = booking_supplement_id;
      SupplementId        = supplement_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LastChangedAt       = last_changed_at;
    }
}